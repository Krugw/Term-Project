import java.awt.BorderLayout;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Vector;

import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.border.Border;
import javax.swing.ImageIcon;
import javax.swing.border.LineBorder;
import java.awt.Color;

/**
 * This class creates a GUI for the user to interact with in
 * order to type in a new term and its definition to add
 * to their usecase project.
 *
 * @author Wesley Krug, Gabriel Steponovich,
 *         Michael Brecker, Halston Raddatz
 * @version Winter 2015
 */
public class EditAltFlowBox extends JDialog implements ActionListener {

    /**
     * serial Version.
     */
    private static final long serialVersionUID = 1L;

    /**
     * Description text field.
     */
    private JTextField descTxt;

    /**
     * OK button.
     */
    private JButton oK;

    /**
     * Cancel button.
     */
    private JButton cancel;

    /**
     * Creates an object for a flow step.
     */
    private AlternateFlowStep flowStep;

    private Vector<JTextField> actionEditFields;

    /**
     * Constructor to set up GUI for user interaction.
     */
    public EditAltFlowBox(AlternateFlowStep aFlowStep) {
        flowStep = aFlowStep;
        flowStep = initialize();
    }

    public AlternateFlowStep initialize(){
        setModalityType(ModalityType.APPLICATION_MODAL);
        setLocationRelativeTo(null);
        setTitle("Edit Alternate Flow Step");
        setSize(469, 255);

            /*
          Creates a panel for buttons.
         */
        JPanel buttonPanel = new JPanel();
        buttonPanel.setBounds(0, 324, 553, 10);
            /*
          Description label.
         */
        getContentPane().setLayout(null);
        actionEditFields = new Vector<JTextField>(1,1);
        for (int i = 0; i < flowStep.getActions().size(); i++) {
       //     panel.add(new JLabel("Action: "));
       //     actionEditFields.add(new JTextField(flowStep.getActions().get(i).substring(4)));
       //     panel.add(actionEditFields.get(i), BorderLayout.AFTER_LAST_LINE);
        }
        //buttonPanel.add(oK);
        //buttonPanel.add(cancel);
        getContentPane().add(buttonPanel);
        
                oK = new JButton("");
                oK.setIcon(new ImageIcon(EditAltFlowBox.class.getResource("/resources/ok.png")));
                oK.setBounds(102, 117, 83, 23);
                getContentPane().add(oK);
                cancel = new JButton("");
                cancel.setIcon(new ImageIcon(EditAltFlowBox.class.getResource("/resources/cancel.png")));
                cancel.setBounds(236, 117, 83, 23);
                getContentPane().add(cancel);
                
                        descTxt = new JTextField(flowStep.getText().substring(4), 60);
                        descTxt.setBorder(new LineBorder(Color.BLACK, 2));
                        descTxt.setBounds(10, 67, 433, 39);
                        getContentPane().add(descTxt);
                        JLabel description = new JLabel("New Description");
                        description.setBounds(10, 51, 553, 16);
                        getContentPane().add(description);
                cancel.addActionListener(this);

        oK.addActionListener(this);

        setVisible(true);
        return flowStep;
    }

    /**
     * The action performed method for created a new term in the
     * glossary.
     *
     * @param e is an ActionEvent
     */
    public final void actionPerformed(final ActionEvent e) {
        /** exits the pop-up box **/
        if (e.getSource() == cancel) {
            dispose();
        }

        if (e.getSource() == oK) {
            if (!descTxt.getText().equals("")) {
                try {
                    String temp = flowStep.getText().substring(0,4);
                    flowStep.setText(temp.concat(descTxt.getText()));
                    for (int i = 0; i < flowStep.getActions().size(); i++) {
                        if (!flowStep.getActions().get(i).equals(actionEditFields.get(i).getText())) {
                            flowStep.getActions().set(i, String.valueOf(flowStep.getText().substring(0,3))
                                    .concat(String.valueOf(i+1)
                                    .concat(actionEditFields.get(i).getText())));
                        }
                    }
                    dispose();
                } catch (Exception e1) {
                    e1.printStackTrace();
                }

            }

        }
    }

    /**
     * Gets a Flow Step.
     *
     * @return the object of a Step
     */
    public final AlternateFlowStep getFlowStep() {
        return flowStep;
    }
}
