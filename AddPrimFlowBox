import java.awt.BorderLayout;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Vector;
import javax.swing.*;

/**
 * This class creates a GUI for the user to interact with in
 * order to type in a new term and its definition to add
 * to their usecase project.
 *
 * @author Wesley Krug, Gabriel Steponovich,
 *         Michael Brecker, Halston Raddatz
 * @version Winter 2015
 */
public class AddPrimFlowBox extends JDialog implements ActionListener {
    /**
      * serial Version.
      */
    private static final long serialVersionUID = 1L;

    /**
      * Description text field.
      */
    private JTextField descTxt;

    /**
      * OK button.
      */
    private JButton oK;

    /**
      * Cancel button.
      */
    private JButton cancel;

    private Vector<PrimaryFlowStep> pFlowSteps;

    /**
      * Constructor to set up GUI for user interaction.
      */
    public AddPrimFlowBox(Vector<PrimaryFlowStep> pFlows) {
        setModalityType(ModalityType.APPLICATION_MODAL);
        setLocationRelativeTo(null);
        setTitle("New Primary Flow Step");
        setSize(474, 177);
        JPanel buttonPanel = new JPanel();
        getContentPane().setLayout(null);
        descTxt = new JTextField(60);
        descTxt.setBorder(null);
        descTxt.setBounds(102, 51, 270, 46);
        getContentPane().add(descTxt);


        oK = new JButton("");
        oK.setIcon(new ImageIcon(AddPrimFlowBox.class.getResource("/resources/ok.png")));
        oK.setBounds(121, 115, 83, 23);
        cancel = new JButton("");
        cancel.setIcon(new ImageIcon(AddPrimFlowBox.class.getResource("/resources/cancel.png")));
        cancel.setBounds(269, 115, 83, 23);
        oK.addActionListener(this);
        cancel.addActionListener(this);

        getContentPane().add(oK);
        getContentPane().add(cancel);
        
                JLabel description = new JLabel("");
                description.setIcon(new ImageIcon(AddPrimFlowBox.class.getResource("/resources/PrimaryFlow.png")));
                description.setBounds(0, 0, 458, 138);
                getContentPane().add(description);
        //this.add(buttonPanel, BorderLayout.SOUTH);



        pFlowSteps = new Vector<PrimaryFlowStep>(pFlows);
        setVisible(true);
        //setModalityType(ModalityType.APPLICATION_MODAL);
        this.setAlwaysOnTop(true);
    }

    public void addSaveListener(ActionListener e) {
        oK.addActionListener(e);
    }
    /**
     * The action performed method for created a new term in the
     * glossary.
     *
     * @param e is an ActionEvent
     */
     public final void actionPerformed(final ActionEvent e) {
        /** exits the pop-up box **/
        if (e.getSource() == cancel) {
            dispose();
        }

        if (e.getSource() == oK) {
            if (!descTxt.getText().equals("")) {
                try {
                    PrimaryFlowStep temp = new PrimaryFlowStep(pFlowSteps.size()+1 + ". " + descTxt.getText());
                    pFlowSteps.add(temp);
                    JOptionPane.showMessageDialog(this, "Primary Flow Step has been added.", "Add Step Success", JOptionPane.INFORMATION_MESSAGE);
                    dispose();
                } catch (Exception e1) {
                    e1.printStackTrace();
                }
            }else{
                JOptionPane.showMessageDialog(null, "Please enter a description.", "Invalid Description", JOptionPane.ERROR_MESSAGE);
            }
        }
     }
    /**
      * Gets a Flow Step.
      *
      * @return the object of a Step
      */
    public final Vector<PrimaryFlowStep> getFlowSteps() {
        return pFlowSteps;
    }
}
