import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Vector;

import javax.swing.*;
import javax.swing.border.LineBorder;

public class AddAltFlowHub extends JDialog implements ActionListener {

    /**
     * This class creates a GUI for the user to interact with in
     * order to type in a new term and its definition to add
     * to their usecase project.
     *
     * @author Wesley Krug, Gabriel Steponovich,
     *         Michael Brecker, Halston Raddatz
     * @version Winter 2015
     */

    /**
     * serial Version.
     */
    private static final long serialVersionUID = 1L;

    /**
     * OK button.
     */
    private JButton add;

    /**
     * Cancel button.
     */
    private JButton cancel;

    /**
     * Edit Button
     */
    private JButton edit;

    /**
     * Save Button
     */
    private JButton save;
    /**
     * JTextpane textPane
     */
    private JTextPane textPane;
    /**
     * Creates an object for a flow step.
     */

    private AlternateFlowStep altFlowStep;

    private boolean flag = false;

    /**
     * Constructor to set up GUI for user interaction.
     */
    public AddAltFlowHub(AlternateFlowStep altFlow) {
        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        setModalityType(ModalityType.APPLICATION_MODAL);
        altFlowStep = new AlternateFlowStep(altFlow);
        setLocationRelativeTo(null);
        setTitle("Add Alternate Flow Hub");
        setSize(394, 364);
        textPane = new JTextPane();
        textPane.setBorder(new LineBorder(new Color(0, 0, 0), 2));
        textPane.setBounds(10, 57, 364, 188);
        textPane.setEditable(false);
        getContentPane().setLayout(null);
        getContentPane().add(textPane);
        edit = new JButton("");
        edit.setIcon(new ImageIcon(AddAltFlowHub.class.getResource("/resources/Modify.png")));
        edit.setBounds(101, 287, 83, 23);
        save = new JButton("");
        save.setIcon(new ImageIcon(AddAltFlowHub.class.getResource("/resources/ok.png")));
        save.setBounds(240, 256, 83, 23);
        
                add = new JButton("");
                add.setIcon(new ImageIcon(AddAltFlowHub.class.getResource("/resources/addstep.png")));
                add.setBounds(74, 256, 83, 23);
                getContentPane().add(add);
                getContentPane().add(edit);
                getContentPane().add(save);
                JLabel title = new JLabel(altFlowStep.getText());
                title.setBounds(162, 30, 212, 23);
                getContentPane().add(title);
                cancel = new JButton("");
                cancel.setIcon(new ImageIcon(AddAltFlowHub.class.getResource("/resources/cancel.png")));
                cancel.setBounds(207, 287, 83, 23);
                getContentPane().add(cancel);
                cancel.addActionListener(this);
                add.addActionListener(this);
        save.addActionListener(this);
        edit.addActionListener(this);
        setVisible(true);
    }

    public AlternateFlowStep getAltFlowStep() {
        return altFlowStep;
    }

    /**
     * The action performed method for created a new term in the
     * glossary.
     *
     * @param e is an ActionEvent
     */
    public final void actionPerformed(final ActionEvent e) {
        if (e.getSource() == add) {
            try {
                final JDialog addBox = new JDialog();
                addBox.setDefaultCloseOperation(DISPOSE_ON_CLOSE);

                addBox.setTitle("Add Alternate Flow Step");
                addBox.setModalityType(Dialog.ModalityType.APPLICATION_MODAL);
                addBox.setSize(350, 150);

                addBox.setLocationRelativeTo(null);

                addBox.getContentPane().setLayout(new GridLayout(3, 1));

                JPanel buttonPanel = new JPanel();
                JButton oKButton;
                JButton cancel;
                JLabel description = new JLabel("Description: ");
                addBox.getContentPane().add(description, BorderLayout.NORTH);
                final JTextField descTxt = new JTextField(60);
                addBox.getContentPane().add(descTxt, BorderLayout.CENTER);


                oKButton = new JButton("Add Step");
                cancel = new JButton("Save");
                addBox.getContentPane().add(oKButton);
                addBox.getContentPane().add(cancel);
                buttonPanel.add(oKButton);
                buttonPanel.add(cancel);
                addBox.getContentPane().add(buttonPanel, BorderLayout.SOUTH);
                oKButton.addActionListener(new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        altFlowStep.addActionWithPrefix(descTxt.getText());
                        JOptionPane.showMessageDialog(null, "Alternate Flow Step has been added.", "Add Step Success", JOptionPane.INFORMATION_MESSAGE);
                        textPane.setText(altFlowStep.toTextBox());
                        addBox.dispose();
                    }
                });
                cancel.addActionListener(new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        flag = true;
                        dispose();
                    }
                });

                addBox.setVisible(true);

            } catch (Exception e1) {
                e1.printStackTrace();
            }
        }

            if (e.getSource() == cancel) {
                flag = false;
                dispose();
            }
        if(e.getSource() == save) {
            flag = true;
            dispose();
        }

            if (e.getSource() == edit) {
                try {
                    EditAltFlowBox editBox = new EditAltFlowBox(altFlowStep);

                    altFlowStep.setText(editBox.getFlowStep().getText());
                    textPane.setText(altFlowStep.toTextBox());
                }catch (Exception e2) {
                    e2.printStackTrace();
                }
            }
        }

    public boolean getFlag() {
        return flag;
    }
}



