import java.util.Vector;

/**
 * @author Owner
 *
 */
public class AlternateFlowStep {
	/**
	 *
	 */
	private String text;
	/**
	 *
	 */
	private PrimaryFlowStep parentFlowStep;
	/**
	 *
	 */
	private Vector<String> actions;

	/**
	 * @param text is t
	 * @param parentFlowStep2 is flow
	 */
	public AlternateFlowStep(final String text, 
			final PrimaryFlowStep parentFlowStep2) {
		this.parentFlowStep = parentFlowStep2;
		setTextAddPrefix(text);
		this.actions = new Vector<String>(1, 1);
	}

	/**
	 * @param parentFlowStep is flow
	 */
	public AlternateFlowStep(final PrimaryFlowStep parentFlowStep2) {
		this.parentFlowStep = parentFlowStep2;
		setTextAddPrefix("");
		this.actions = new Vector<String>(1, 1);
	}

	/**
	 * @param text is t
	 */
	public AlternateFlowStep(final String text2) {
		this.text = text2;
	}

	/**
	 *
	 */
	public AlternateFlowStep() {
		actions = new Vector<String>(1, 1);
	}

	/**
	 * @param text
	 * @param parentFlowStep
	 * @param actions
	 */
	public AlternateFlowStep(final String text,
			final PrimaryFlowStep parentFlowStep,
			final Vector<String> actions) {

		this.text = text;
		this.parentFlowStep = parentFlowStep;
		this.actions = actions;
	}

	/**
	 * @param altStep is step
	 */
	public AlternateFlowStep(final AlternateFlowStep altStep) {
		this.text = altStep.getText();
		this.parentFlowStep = altStep.getParentFlowStep();
		this.actions = new Vector<String>(altStep.getActions());
	}

	/**
	 * @return text
	 */
	public final String getText() {
		return text;
	}

	/**
	 * @param text is t
	 */
	public final void setTextAddPrefix(final String text) {
		char num = parentFlowStep.toString().charAt(0);
		char letter = 97;
		for (int i = 0; i < parentFlowStep.getNumAltFlows(); i++) {
			letter++;
		}
		this.text = (String.valueOf(num).concat(
		String.valueOf(letter).concat(". ")).concat(text));
	}

	/**
	 * @param text is t
	 */
	public final void setText(final String text2) {
		this.text = text2;
	}

	/**
	 * @return temp
	 */
	public final String toTextBox() {
		String temp = "";

		for (String action : actions) {
			temp = temp.concat("    " + action + "\n");
		}
		return temp;
	}

	/**
	 * @return parentflow
	 */
	public final PrimaryFlowStep getParentFlowStep() {
		return parentFlowStep;
	}

	/**
	 * @param parentFlowStep
	 */
	public final void setParentFlowStep(final
			PrimaryFlowStep parentFlowStep) {
		this.parentFlowStep = parentFlowStep;
	}

	/* (non-Javadoc)
	 * @see java.lang.Object#toString()
	 */
	@Override
	public final String toString() {
		return text;

	}

	/**
	 * @return actions
	 */
	public final Vector<String> getActions() {
		return actions;
	}

	/**
	 * @param action is a
	 */
	public final void addAction(String action) {
		actions.add(action);
	}

	/**
	 * @param action is a
	 */
	public final void addActionWithPrefix(String action) {
		this.actions.add(String.valueOf(text.substring(0, 3))
		.concat(String.valueOf(actions.size() + 1) + " ")
				.concat(action));
	}
}
